---
description: 테트리스 게임 개발 규칙 (Python + pygame)
globs:
alwaysApply: true
---

# 테트리스 게임 개발 규칙

## 🎯 프로젝트 개요
- **프로젝트명**: 문과생도 만드는 첫 번째 테트리스 🎮
- **기술 스택**: Python 3.8+ + pygame + pytest
- **개발 방식**: TDD (Test-Driven Development)

## 📋 개발 원칙

### 1. TDD 사이클 준수
- **Red**: 실패하는 테스트 코드 먼저 작성
- **Green**: 테스트를 통과하는 최소한의 코드 작성
- **Refactor**: 코드 개선 및 최적화

### 2. 단계별 개발
- 절대 한꺼번에 진행하지 마
- 한 번에 하나의 기능만 구현
- 각 단계 완료 후 다음 단계로 진행

### 3. 테스트 우선
- 모든 기능에 대해 테스트 코드 먼저 작성
- Mock 객체 활용한 격리된 테스트
- 경계값 테스트 (edge cases) 포함

### 4. 커밋 및 푸시
- 각 단계별 마무리가 되면 반드시 커밋과 푸시
- 커밋 메시지는 명확하고 구체적으로 작성
- README.md 지속적 업데이트

## 코딩 규칙

### Python 코드 스타일
- PEP 8 준수
- 함수/클래스명은 명확하고 설명적
- 주석은 한국어로 작성
- Docstring 활용

### 테스트 코드 규칙
- 테스트 함수명: `test_기능명_상황_예상결과`
- 각 테스트는 독립적으로 실행 가능
- Mock 객체로 외부 의존성 제거

### Git 커밋 및 푸시 규칙
```
feat: 새로운 기능 추가
fix: 버그 수정
test: 테스트 코드 추가/수정
refactor: 코드 리팩토링
docs: 문서 업데이트
```

**커밋 후 푸시 절차:**
1. `git add .` - 모든 변경사항 스테이징
2. `git commit -m "커밋 메시지"` - 변경사항 커밋
3. `git push` - 원격 저장소에 푸시
4. 각 단계 완료 시 반드시 실행

## 🚫 금지 사항
- 테스트 없이 코드 작성 금지
- 한 번에 여러 기능 구현 금지
- 커밋 없이 다음 단계 진행 금지
- README.md 업데이트 누락 금지

## ✅ 완료 조건
- [ ] 모든 테스트 통과
- [ ] 코드 리뷰 완료
- [ ] Git 커밋 및 푸시
- [ ] README.md 업데이트
- [ ] 다음 단계 계획 수립


```